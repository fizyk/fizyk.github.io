<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cases (Posts about testing)</title><link>http://blog.fizyk.net.pl/</link><description></description><atom:link href="http://blog.fizyk.net.pl/tags/testing.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Wed, 16 Jun 2021 11:45:54 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>mirakuru 0.2 released</title><link>http://blog.fizyk.net.pl/blog/mirakuru-02-released/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;Last Thursday, we released new minor version of mirakuru.
Mirakuru is a helpful tools that lets add superpowers to Your tests, or maybe
other scripts that need other processes to run.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Changes introduced to mirakuru 0.2 - are:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;context managers (for both starting and stopping)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ability to detect if resources required by executors (TCP or HTTP) aren't already used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;and a fix, for killing executors started with their own shell.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://blog.fizyk.net.pl/blog/mirakuru-02-released/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>mirakuru</category><category>python</category><category>testing</category><guid>http://blog.fizyk.net.pl/blog/mirakuru-02-released/</guid><pubDate>Sat, 16 Aug 2014 19:21:07 GMT</pubDate></item><item><title>mirakuru, your tests little helper</title><link>http://blog.fizyk.net.pl/blog/mirakuru-your-tests-little-helper/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;Just yesterday, we released first version of mirakuru.
Mirakuru is a helpful tools that lets add superpowers to Your tests, or maybe
other scripts that need other processes to run.&lt;/p&gt;
&lt;p&gt;With few lines of code, mirakuru guarantees, that when running, your script will
start it's own database instance, or the webserver you've just wrote, and need
to test it by sending real requests to it - automatically.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.fizyk.net.pl/blog/mirakuru-your-tests-little-helper/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>mirakuru</category><category>python</category><category>testing</category><guid>http://blog.fizyk.net.pl/blog/mirakuru-your-tests-little-helper/</guid><pubDate>Thu, 03 Jul 2014 18:19:11 GMT</pubDate></item><item><title>pytest_pyramid - to ease testing pyramid apps in pytest suite</title><link>http://blog.fizyk.net.pl/blog/pytest_pyramid-to-ease-testing-pyramid-apps-in-pytest-suite/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;I've just released &lt;strong&gt;pytest_pyramid&lt;/strong&gt;, a package, that should help testing pyramid applications with pytest suite. It's mostly generalized code, that I've been using across my projects to create both configuration and testing application.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.fizyk.net.pl/blog/pytest_pyramid-to-ease-testing-pyramid-apps-in-pytest-suite/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>pyramid</category><category>pytest</category><category>testing</category><guid>http://blog.fizyk.net.pl/blog/pytest_pyramid-to-ease-testing-pyramid-apps-in-pytest-suite/</guid><pubDate>Sun, 12 Jan 2014 21:59:05 GMT</pubDate></item><item><title>Gathering tests coverage for subprocesses in python</title><link>http://blog.fizyk.net.pl/blog/gathering-tests-coverage-for-subprocesses-in-python/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently at work I've stumbled across quite a problem, how do You check your code coverage, especially in integration tests, when portions of your code are running as subprocesses?&lt;/p&gt;
&lt;p&gt;tl;dr: Be gentle.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.fizyk.net.pl/blog/gathering-tests-coverage-for-subprocesses-in-python/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>coverage</category><category>pytest</category><category>python</category><category>testing</category><guid>http://blog.fizyk.net.pl/blog/gathering-tests-coverage-for-subprocesses-in-python/</guid><pubDate>Sun, 27 Oct 2013 19:22:05 GMT</pubDate></item></channel></rss>