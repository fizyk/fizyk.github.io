<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cases (Posts about tip)</title><link>https://fizyk.dev/</link><description></description><atom:link href="https://fizyk.dev/tags/tip.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Wed, 19 Mar 2025 21:04:19 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>How to kill a process hanging on a port</title><link>https://fizyk.dev/blog/how-to-kill-a-process-hanging-on-a-port/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;p&gt;Sometimes when you develop, you might find yourself with strange error. It says that the process you're trying to start is trying to use port, that is already being used. It's strange, because it is usually You, who used this port on previous run. If that's the case, then &lt;strong&gt;fuser&lt;/strong&gt; command should relieve you from this error.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_a8a91fb929b9444bb1e53f2920281271-1" name="rest_code_a8a91fb929b9444bb1e53f2920281271-1" href="https://fizyk.dev/blog/how-to-kill-a-process-hanging-on-a-port/#rest_code_a8a91fb929b9444bb1e53f2920281271-1"&gt;&lt;/a&gt;fuser&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6543&lt;/span&gt;/tcp&lt;span class="w"&gt; &lt;/span&gt;-k
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;k&lt;/strong&gt; parameter is responsible for actual killing. Without it, the command would just identify which process is using port/socket in question.&lt;/p&gt;</description><category>terminal</category><category>tip</category><guid>https://fizyk.dev/blog/how-to-kill-a-process-hanging-on-a-port/</guid><pubDate>Wed, 11 Dec 2013 21:07:24 GMT</pubDate></item><item><title>Easy way to debug email communication in python</title><link>https://fizyk.dev/blog/easy-way-to-debug-email-communication-in-python/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;p&gt;I might not be fond of Django itself, but one can learn a thing or two from it. For example, if it wasn't for working with Django, I'd probably miss the fact, that you can start a simple smtp server to debug email communications in your apps (no matter the programming language).&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_a9b31d0daa5a4f4fb05a75bcf06f7d28-1" name="rest_code_a9b31d0daa5a4f4fb05a75bcf06f7d28-1" href="https://fizyk.dev/blog/easy-way-to-debug-email-communication-in-python/#rest_code_a9b31d0daa5a4f4fb05a75bcf06f7d28-1"&gt;&lt;/a&gt;python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;smtpd&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;DebuggingServer&lt;span class="w"&gt; &lt;/span&gt;localhost:1025
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's simple as that. Now you can just configure your app to use smtp connection as passed to smtpd server here.&lt;/p&gt;</description><category>email</category><category>python</category><category>smtp</category><category>tip</category><guid>https://fizyk.dev/blog/easy-way-to-debug-email-communication-in-python/</guid><pubDate>Sun, 10 Nov 2013 19:39:54 GMT</pubDate></item><item><title>Powerline-shell - beautify your shell</title><link>https://fizyk.dev/blog/powerline-shell-beautify-your-shell/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;There are hacks to make your terminal more developer friendly. Like displaying current virtual env, and git branch. But there are ways to display these things more clearly as well. One of such ways is &lt;a class="reference external" href="https://github.com/milkbikis/powerline-shell"&gt;Powerline-shell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fizyk.dev/blog/powerline-shell-beautify-your-shell/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>shell</category><category>tip</category><guid>https://fizyk.dev/blog/powerline-shell-beautify-your-shell/</guid><pubDate>Sun, 11 Aug 2013 10:35:52 GMT</pubDate></item><item><title>unicode is faster than decode</title><link>https://fizyk.dev/blog/unicode-is-faster-than-decode/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;p&gt;This might come as a surprise, but in python 2.7, it's actually faster to decode strigs with unicode function, than decode method.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_12374512f53e466eb633838b23b3dd69-1" name="rest_code_12374512f53e466eb633838b23b3dd69-1" href="https://fizyk.dev/blog/unicode-is-faster-than-decode/#rest_code_12374512f53e466eb633838b23b3dd69-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;timeit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Timer&lt;/span&gt;
&lt;a id="rest_code_12374512f53e466eb633838b23b3dd69-2" name="rest_code_12374512f53e466eb633838b23b3dd69-2" href="https://fizyk.dev/blog/unicode-is-faster-than-decode/#rest_code_12374512f53e466eb633838b23b3dd69-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"grzegrzółka"&lt;/span&gt;
&lt;a id="rest_code_12374512f53e466eb633838b23b3dd69-3" name="rest_code_12374512f53e466eb633838b23b3dd69-3" href="https://fizyk.dev/blog/unicode-is-faster-than-decode/#rest_code_12374512f53e466eb633838b23b3dd69-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_12374512f53e466eb633838b23b3dd69-4" name="rest_code_12374512f53e466eb633838b23b3dd69-4" href="https://fizyk.dev/blog/unicode-is-faster-than-decode/#rest_code_12374512f53e466eb633838b23b3dd69-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_12374512f53e466eb633838b23b3dd69-5" name="rest_code_12374512f53e466eb633838b23b3dd69-5" href="https://fizyk.dev/blog/unicode-is-faster-than-decode/#rest_code_12374512f53e466eb633838b23b3dd69-5"&gt;&lt;/a&gt;&lt;span class="mf"&gt;1.4051871299743652&lt;/span&gt;
&lt;a id="rest_code_12374512f53e466eb633838b23b3dd69-6" name="rest_code_12374512f53e466eb633838b23b3dd69-6" href="https://fizyk.dev/blog/unicode-is-faster-than-decode/#rest_code_12374512f53e466eb633838b23b3dd69-6"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_12374512f53e466eb633838b23b3dd69-7" name="rest_code_12374512f53e466eb633838b23b3dd69-7" href="https://fizyk.dev/blog/unicode-is-faster-than-decode/#rest_code_12374512f53e466eb633838b23b3dd69-7"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_12374512f53e466eb633838b23b3dd69-8" name="rest_code_12374512f53e466eb633838b23b3dd69-8" href="https://fizyk.dev/blog/unicode-is-faster-than-decode/#rest_code_12374512f53e466eb633838b23b3dd69-8"&gt;&lt;/a&gt;&lt;span class="mf"&gt;0.4272959232330322&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, unicode method isn't valid for python3, but you can always mock it's behaviour for py3 in some compat.py file, but... strings in python3 are finally unicode, not ascii like in python2.7,so unless you develop some nice library, you probably know what python version will be running your project.&lt;/p&gt;</description><category>benchmark</category><category>python</category><category>tip</category><guid>https://fizyk.dev/blog/unicode-is-faster-than-decode/</guid><pubDate>Wed, 17 Jul 2013 21:08:14 GMT</pubDate></item><item><title>.ssh/config file</title><link>https://fizyk.dev/blog/sshconfig-file/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;The &lt;em&gt;.ssh/config&lt;/em&gt; file allows to configure ssh aliases in quite an elegant way. Makes obsolete the need to remember full ssh server address, port, user or possibly different authentication file you'd need to pass.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fizyk.dev/blog/sshconfig-file/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>ssh</category><category>tip</category><guid>https://fizyk.dev/blog/sshconfig-file/</guid><pubDate>Thu, 09 May 2013 20:53:27 GMT</pubDate></item><item><title>Pandoc: Convert documents between formats</title><link>https://fizyk.dev/blog/pandoc-convert-documents-between-formats/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;Here's another post from my recent migration to Nikola. On my engine, I stored posts in databse in html, but writing Nikola, I wanted to use reStructuredText format. And while I probably could leave out old posts in html, I thought it would be only for the best to find a simple way, and reformat all my posts into rst files.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fizyk.dev/blog/pandoc-convert-documents-between-formats/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>pandoc</category><category>python</category><category>tip</category><category>tools</category><guid>https://fizyk.dev/blog/pandoc-convert-documents-between-formats/</guid><pubDate>Sat, 27 Apr 2013 19:01:13 GMT</pubDate></item><item><title>Delete all the .pyc!</title><link>https://fizyk.dev/blog/delete-all-the-pyc/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;How to remove leftover .pyc files, when your editor doesn't provide such option? Run simple bash command.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fizyk.dev/blog/delete-all-the-pyc/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>bash</category><category>python</category><category>tip</category><guid>https://fizyk.dev/blog/delete-all-the-pyc/</guid><pubDate>Tue, 02 Apr 2013 16:14:49 GMT</pubDate></item></channel></rss>