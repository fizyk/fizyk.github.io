<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cases (Posts about pytest)</title><link>https://fizyk.dev/</link><description></description><atom:link href="https://fizyk.dev/tags/pytest.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Wed, 19 Mar 2025 21:04:19 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Measuring test coverage of py.test plugins</title><link>https://fizyk.dev/blog/measuring-test-coverage-of-pytest-plugins/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;Measuring your code's test coverage is important, though not definitive metric
to tell that Your code is well tested. But to measure coverage properly, tests
have to be properly initialized as well. And today I asked myself a question,
how do I measure properly test coverage of &lt;a class="reference external" href="http://pytest.org/"&gt;py.test&lt;/a&gt;
plugins?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fizyk.dev/blog/measuring-test-coverage-of-pytest-plugins/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>coverage</category><category>pytest</category><category>python</category><guid>https://fizyk.dev/blog/measuring-test-coverage-of-pytest-plugins/</guid><pubDate>Sun, 16 Nov 2014 15:54:42 GMT</pubDate></item><item><title>pytest-dbfixtures now works with python 3</title><link>https://fizyk.dev/blog/pytest-dbfixtures-now-works-with-python-3/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;Few days ago we've released a python3 compatible version of pytest-dbfixtures,
a pytest plugin with fixtures and factories that can start fresh
mysql, postgresql, elasticsearch, redis, rabbitmq and mongodb processes for Your tests -
and clean their data afterwards. It also provides factories for fixtures
if you'd need more processes of one kind or with different settings.&lt;/p&gt;
&lt;p&gt;Unfortunately, if You've been using rabbitmq and/or mysql related fixtures,
please check your tests carefuly, as these fixtures got most backward incompatible changes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fizyk.dev/blog/pytest-dbfixtures-now-works-with-python-3/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>dbfixtures</category><category>pytest</category><category>python</category><guid>https://fizyk.dev/blog/pytest-dbfixtures-now-works-with-python-3/</guid><pubDate>Sat, 08 Nov 2014 18:16:25 GMT</pubDate></item><item><title>pyramid_fullauth 0.3.0 released!</title><link>https://fizyk.dev/blog/pyramid_fullauth-030-released/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;After over a month of work I've finally released version 0.3.0 of pyramid_fullauth!
This release changes are mostly to testing the package, as with it, it finally reached 100% code coverage, but along I also introduced automatic style checking with pep8, pylint, pep257 and mccabe linter, so in-code changes were big enough, that I had to release it as a new minor version.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fizyk.dev/blog/pyramid_fullauth-030-released/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>fullauth</category><category>pyramid</category><category>pytest</category><category>pytest_pyramid</category><category>python</category><guid>https://fizyk.dev/blog/pyramid_fullauth-030-released/</guid><pubDate>Fri, 25 Apr 2014 20:32:29 GMT</pubDate></item><item><title>pytest_pyramid - to ease testing pyramid apps in pytest suite</title><link>https://fizyk.dev/blog/pytest_pyramid-to-ease-testing-pyramid-apps-in-pytest-suite/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;I've just released &lt;strong&gt;pytest_pyramid&lt;/strong&gt;, a package, that should help testing pyramid applications with pytest suite. It's mostly generalized code, that I've been using across my projects to create both configuration and testing application.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fizyk.dev/blog/pytest_pyramid-to-ease-testing-pyramid-apps-in-pytest-suite/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>pyramid</category><category>pytest</category><category>testing</category><guid>https://fizyk.dev/blog/pytest_pyramid-to-ease-testing-pyramid-apps-in-pytest-suite/</guid><pubDate>Sun, 12 Jan 2014 21:59:05 GMT</pubDate></item><item><title>Gathering tests coverage for subprocesses in python</title><link>https://fizyk.dev/blog/gathering-tests-coverage-for-subprocesses-in-python/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently at work I've stumbled across quite a problem, how do You check your code coverage, especially in integration tests, when portions of your code are running as subprocesses?&lt;/p&gt;
&lt;p&gt;tl;dr: Be gentle.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fizyk.dev/blog/gathering-tests-coverage-for-subprocesses-in-python/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>coverage</category><category>pytest</category><category>python</category><category>testing</category><guid>https://fizyk.dev/blog/gathering-tests-coverage-for-subprocesses-in-python/</guid><pubDate>Sun, 27 Oct 2013 19:22:05 GMT</pubDate></item><item><title>pytest_sauce, a helpful companion to your selenium tests written in pytest</title><link>https://fizyk.dev/blog/pytest_sauce-a-helpful-companion-to-your-selenium-tests-written-in-pytest/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;Last week, our team at &lt;a class="reference external" href="http://clearcode.cc/"&gt;Clearcode&lt;/a&gt; has released package to PyPI, that takes most of the tedious tasks when writing and running selenium tests of Ones shoulder. It main tasks is to take prepared configuration file, which tells paytest_sauce what tests and what browser should the tests be run in, and then run them. But that's not all.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fizyk.dev/blog/pytest_sauce-a-helpful-companion-to-your-selenium-tests-written-in-pytest/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>pytest</category><category>python</category><category>saucelabs</category><category>selenium</category><guid>https://fizyk.dev/blog/pytest_sauce-a-helpful-companion-to-your-selenium-tests-written-in-pytest/</guid><pubDate>Sat, 31 Aug 2013 17:38:41 GMT</pubDate></item></channel></rss>