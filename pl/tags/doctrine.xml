<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cases (Posty o doctrine)</title><link>http://blog.fizyk.net.pl/</link><description></description><atom:link href="http://blog.fizyk.net.pl/pl/tags/doctrine.xml" rel="self" type="application/rss+xml"></atom:link><language>pl</language><lastBuildDate>Wed, 16 Jun 2021 11:18:44 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>sqlite w środowisku developerskim w symfony i symfony2</title><link>http://blog.fizyk.net.pl/pl/blog/sqlite-w-srodowisku-developerskim-w-symfony-i-symfony2/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;Sqlite nie koniecznie jest dobrą bazą produkcyjną dla tworzonych
aplikacji internetowych. Jednak podczas ich tworzenia powinna nadać się
idealnie. Tym bardziej, jeśli nie chcemy naszej maszyny developerskiej
obarczać dodatkowymi procesami, czy też pilnować włączania/wyłączania
serwerów bazy danych, sqlite nada się idealnie.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.fizyk.net.pl/pl/blog/sqlite-w-srodowisku-developerskim-w-symfony-i-symfony2/"&gt;Czytaj więcej…&lt;/a&gt; (zostało 1 minut czytania)&lt;/p&gt;&lt;/div&gt;</description><category>doctrine</category><category>php</category><category>sqlite</category><category>symfony</category><category>symfony2</category><guid>http://blog.fizyk.net.pl/pl/blog/sqlite-w-srodowisku-developerskim-w-symfony-i-symfony2/</guid><pubDate>Thu, 26 Jan 2012 19:01:23 GMT</pubDate></item><item><title>symfony 1.4.7</title><link>http://blog.fizyk.net.pl/pl/blog/symfony-1-4-7/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;Nowa wersja &lt;a class="reference external" href="http://www.symfony-project.org/blog/2010/09/22/symfony-1-3-7-1-4-7"&gt;symfony
(1.4.7)&lt;/a&gt;
ujrzała światło dzienne wczoraj. Nowa wersja zawiera głównie poprawki,
jedno usprawnienie, oraz nową wersję &lt;a class="reference external" href="http://www.doctrine-project.org/blog/doctrine-orm-version-1-2-3-released"&gt;doctrine
(1.2.3)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.fizyk.net.pl/pl/blog/symfony-1-4-7/"&gt;Czytaj więcej…&lt;/a&gt; (zostało 1 minut czytania)&lt;/p&gt;&lt;/div&gt;</description><category>doctrine</category><category>framework</category><category>php</category><category>symfony</category><guid>http://blog.fizyk.net.pl/pl/blog/symfony-1-4-7/</guid><pubDate>Thu, 23 Sep 2010 06:09:25 GMT</pubDate></item><item><title>Sortowanie pobieranych elementów z dql według zadanego zbioru</title><link>http://blog.fizyk.net.pl/pl/blog/sortowanie-pobieranych-elementow-z-dql-wedlug-zadanego-zbioru/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;Czasem zdarza się, że chcielibyśmy pobrać z bazy danych elementy z
określonego zbioru, a także je posortować według kolejności, w jakiej w
tym zbiorze się znajdują. Samo zadanie skomplikowane nie jest,
aczkolwiek nie jest również takie proste. Poniżej zaprezentuję podejście
do problemu, oraz pułapki, które mogą nas spotkać podczas rozwiązywania
tego problemu.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.fizyk.net.pl/pl/blog/sortowanie-pobieranych-elementow-z-dql-wedlug-zadanego-zbioru/"&gt;Czytaj więcej…&lt;/a&gt; (zostało 2 minut czytania)&lt;/p&gt;&lt;/div&gt;</description><category>doctrine</category><category>dql</category><category>order by</category><category>php</category><category>sql</category><category>where in</category><guid>http://blog.fizyk.net.pl/pl/blog/sortowanie-pobieranych-elementow-z-dql-wedlug-zadanego-zbioru/</guid><pubDate>Mon, 16 Aug 2010 18:08:51 GMT</pubDate></item><item><title>fzBlameable</title><link>http://blog.fizyk.net.pl/pl/blog/fzblameable/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;Podczas pierwszego kontaktu z symfony i doctrine, nie zdawałem sobie
sprawy z ułatwień oferowanych przez behavioury. Sluggable był z początku
swego rodzaju magią, a ja lubię wiedzieć, jakie kółka zębate wprawiają
machinę w ruch. Kwiestię właściciela, który stworzył dany obiekt,
rozwiązywałem tam, gdzie obiekt był tworzony, w każdej akcji osobno.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.fizyk.net.pl/pl/blog/fzblameable/"&gt;Czytaj więcej…&lt;/a&gt; (zostało 1 minut czytania)&lt;/p&gt;&lt;/div&gt;</description><category>behaviour</category><category>doctrine</category><category>fzBlameable</category><category>php</category><category>plugin</category><category>symfony</category><guid>http://blog.fizyk.net.pl/pl/blog/fzblameable/</guid><pubDate>Sun, 01 Aug 2010 20:08:17 GMT</pubDate></item><item><title>Aktualizacja sfDoctrineGuardPlugin 4.0.1 do 5.0.0</title><link>http://blog.fizyk.net.pl/pl/blog/aktualizacja-sfdoctrineguardplugin-4-0-1-do-4-0-2/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;W tygodniu pojawiła się nowa wersja pluginu sfDoctrineGuardPlugin.
[STRIKEOUT:Nie przywiązywałem do tego większej wagi, ze względu na
changelog, który informował tylko o poprawce generowania kluczy
"pamiętaj mnie" &lt;em&gt;(ang. Remember Me)&lt;/em&gt;].&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.fizyk.net.pl/pl/blog/aktualizacja-sfdoctrineguardplugin-4-0-1-do-4-0-2/"&gt;Czytaj więcej…&lt;/a&gt; (zostało 2 minut czytania)&lt;/p&gt;&lt;/div&gt;</description><category>doctrine</category><category>doctrine migration</category><category>migracje</category><category>php</category><category>sfDoctrineGuard</category><category>sfForkedDoctrineApply</category><category>symfony</category><guid>http://blog.fizyk.net.pl/pl/blog/aktualizacja-sfdoctrineguardplugin-4-0-1-do-4-0-2/</guid><pubDate>Sun, 18 Jul 2010 21:07:58 GMT</pubDate></item><item><title>Zmiana modelu dziedziczenia w pluginie sfForkedDoctrineApply</title><link>http://blog.fizyk.net.pl/pl/blog/zmiana-modelu-dziedziczenia-w-pluginie-sfforkeddoctrineapply/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;Od wersji 1.3.0 pluginu &lt;strong&gt;sfForkedDoctrineApply&lt;/strong&gt; nastąpi zmiana modelu
dziedziczenia doctrine modelu profilu, z simple na column_aggregation.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.fizyk.net.pl/pl/blog/zmiana-modelu-dziedziczenia-w-pluginie-sfforkeddoctrineapply/"&gt;Czytaj więcej…&lt;/a&gt; (zostało 1 minut czytania)&lt;/p&gt;&lt;/div&gt;</description><category>column_aggregation</category><category>doctrine</category><category>inheritance</category><category>plugin</category><category>sfForkedDoctrineApply</category><category>symfony</category><guid>http://blog.fizyk.net.pl/pl/blog/zmiana-modelu-dziedziczenia-w-pluginie-sfforkeddoctrineapply/</guid><pubDate>Thu, 08 Jul 2010 20:07:54 GMT</pubDate></item><item><title>Nie wierz migracjom</title><link>http://blog.fizyk.net.pl/pl/blog/nie-wierz-migracjom/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;Migracje doctrinowe są narzędziem, które ma nam ułatwić wersjonowanie
bazy danych. Dzięki nim można po zmianie schematu zmienić zarówno bazę
na maszynie developerskiej, a później powtórzyć zmiany na produkcyjnej.
Ale to narzędzie ma tylko ułatwić, nie wyręczyć. Wygeneruje klasy
migracyjne ale na z góry określonych zasadach. Najpierw operacje na
tabelach, później klucze i indeksy:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.fizyk.net.pl/pl/blog/nie-wierz-migracjom/"&gt;Czytaj więcej…&lt;/a&gt; (zostało 2 minut czytania)&lt;/p&gt;&lt;/div&gt;</description><category>doctrine</category><category>migracje</category><category>symfony</category><guid>http://blog.fizyk.net.pl/pl/blog/nie-wierz-migracjom/</guid><pubDate>Sun, 16 May 2010 19:05:42 GMT</pubDate></item><item><title>Polskie znaki w MySQL, doctrine i symfony</title><link>http://blog.fizyk.net.pl/pl/blog/polskie-znaki-w-mysql-doctrine-i-symfony/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;Niejednokrotnie tworząc bazę danych w MySQL, nie trudno nie zauważyć, iż
w świeżej, nieskonfigurowanej instalacji tego systemu zarządzania bazą
danych, domyślnym typem kodowania nie jest
&lt;a class="reference external" href="http://pl.wikipedia.org/wiki/UTF-8"&gt;utf8&lt;/a&gt; tylko
&lt;a class="reference external" href="http://pl.wikipedia.org/wiki/ISO_8859-1"&gt;cp1252&lt;/a&gt;/&lt;a class="reference external" href="http://pl.wikipedia.org/wiki/ISO_8859-1"&gt;latin1_swedish&lt;/a&gt;.&lt;/p&gt;
&lt;!-- TEASE_END --&gt;
&lt;p&gt;Tworząc aplikację korzystającą z takiej bazy, a samej używającej
unicode, powinniśmy dla świętego spokoju sprawdzić i pilnować z jakiego
kodowania nasza baza danych korzysta. Choćby dlatego, że inna aplikacja
podłączona do takiej bazy danych może mieć problemy z rozpoznaniem i
połapaniem się w tej mieszance kodowań. Nie jest również zbyt
intuicyjnym przechowywanie ciągu znaków zakodowanego w
&lt;a class="reference external" href="http://pl.wikipedia.org/wiki/Unicode"&gt;unicode&lt;/a&gt;, w strukturze
używającej &lt;strong&gt;cp1252&lt;/strong&gt; lub innego systemu kodowania.&lt;/p&gt;
&lt;p&gt;Również symfony, z całym przywiązaniem do unicode, nie robi nic, by
wymusić stosowanie tego kodowanie w tworzonych poprzez doctrine
tabelach, czy też samym połączeniu na lini baza danych - aplikacja.
Konieczne jest ręczne ustawienie odpowiednich wartości w pliku
&lt;strong&gt;database.yml&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="code yaml"&gt;&lt;a id="rest_code_385fe1320d7e462fac33a91d19c8df13-1" name="rest_code_385fe1320d7e462fac33a91d19c8df13-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;all&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_385fe1320d7e462fac33a91d19c8df13-2" name="rest_code_385fe1320d7e462fac33a91d19c8df13-2"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;doctrine&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_385fe1320d7e462fac33a91d19c8df13-3" name="rest_code_385fe1320d7e462fac33a91d19c8df13-3"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sfDoctrineDatabase&lt;/span&gt;
&lt;a id="rest_code_385fe1320d7e462fac33a91d19c8df13-4" name="rest_code_385fe1320d7e462fac33a91d19c8df13-4"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;param&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_385fe1320d7e462fac33a91d19c8df13-5" name="rest_code_385fe1320d7e462fac33a91d19c8df13-5"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;a id="rest_code_385fe1320d7e462fac33a91d19c8df13-6" name="rest_code_385fe1320d7e462fac33a91d19c8df13-6"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_385fe1320d7e462fac33a91d19c8df13-7" name="rest_code_385fe1320d7e462fac33a91d19c8df13-7"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;default_table_charset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;utf8&lt;/span&gt;
&lt;a id="rest_code_385fe1320d7e462fac33a91d19c8df13-8" name="rest_code_385fe1320d7e462fac33a91d19c8df13-8"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;default_table_collate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;utf8_general_ci&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;W ten sposób można w spokoju tworzyć aplikacje używające kodowania
unicode bez obawy wystąpienia błędu nieprawidłowego kodowania znaków w
porównaniu MySQL, lub innych niespodzianek z tym związanych.&lt;/p&gt;
&lt;p&gt;Z reguły znaki używane na zachodzie (znaki ASCII) są kodowane w ten sam
sposób w unicode jak i w cp1252/latin1, czego nie można powiedzieć o
polskich ogonkach, czy występujących w czeskim i innych
zachodniosłowiańskich językach ptaszkach (Przykład: Čech).&lt;/p&gt;&lt;/div&gt;</description><category>doctrine</category><category>mysql</category><category>symfony</category><category>unicode</category><category>utf8</category><guid>http://blog.fizyk.net.pl/pl/blog/polskie-znaki-w-mysql-doctrine-i-symfony/</guid><pubDate>Sun, 09 May 2010 10:05:53 GMT</pubDate></item><item><title>Settery pól behavioura dla Doctrine</title><link>http://blog.fizyk.net.pl/pl/blog/settery-pol-behavioura-dla-doctrine/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;Przy okazji przenoszenia dmTagPlugin z powrotem do korzeni Diema, do
symfony, przypomniała mi się jedna rzecz, którą warto poruszyć. Dotyczy
ona tworzenia behavioura i obsługi pól modelu wprowadzanych przez
szablon behavioura do modelu otrzymującego naszego behavioura.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.fizyk.net.pl/pl/blog/settery-pol-behavioura-dla-doctrine/"&gt;Czytaj więcej…&lt;/a&gt; (zostało 1 minut czytania)&lt;/p&gt;&lt;/div&gt;</description><category>behaviour</category><category>dmTag</category><category>doctrine</category><guid>http://blog.fizyk.net.pl/pl/blog/settery-pol-behavioura-dla-doctrine/</guid><pubDate>Tue, 27 Apr 2010 19:04:48 GMT</pubDate></item><item><title>symfony 1.4.4 i BaseToPrfx</title><link>http://blog.fizyk.net.pl/pl/blog/symfony-1-4-4-i-basetoprfx/</link><dc:creator>Grzegorz Śliwiński</dc:creator><description>&lt;div&gt;&lt;p&gt;Wczoraj wyszła czwarta wersja symfony z linii 1.3.x i 1.4.x
(Zaanonsowane na &lt;a class="reference external" href="http://www.symfony-project.org/blog/2010/04/06/symfony-1-3-4-and-1-4-4"&gt;blogu
symfony&lt;/a&gt;).
Co ciekawe, poprawki wprowadzone w tej wersji częściowo adresują problem
poruszony w moim poprzednim poście, dlatego postanowiłem przetestować
migracje tak szybko jak na to zadania pozwolą.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.fizyk.net.pl/pl/blog/symfony-1-4-4-i-basetoprfx/"&gt;Czytaj więcej…&lt;/a&gt; (zostało 1 minut czytania)&lt;/p&gt;&lt;/div&gt;</description><category>diem</category><category>doctrine</category><category>migracje</category><category>symfony</category><category>toprfx</category><guid>http://blog.fizyk.net.pl/pl/blog/symfony-1-4-4-i-basetoprfx/</guid><pubDate>Thu, 08 Apr 2010 19:04:31 GMT</pubDate></item></channel></rss>